trigger:
- main

resources:
- repo: self

variables:
  image_repo: 'karolplonka/nodejs_api'
  tag: '$(Build.BuildId)' #'latest'
  test_script_path: '$(Build.SourcesDirectory)'
  test_script_name: 'test_build.sh'

stages:
- stage: Build
  displayName: Build image
  variables:
    insert_tag: '$(tag)'
  jobs:
  - job: Build
    displayName: Build
    pool:
      vmImage: ubuntu-latest
    steps:
    - task: Docker@2
      displayName: Build docker image
      inputs:
        containerRegistry: 'dockerhub.com_karolplonka'
        repository: '$(image_repo)'
        command: 'buildAndPush'
        Dockerfile: '$(Build.SourcesDirectory)/Dockerfile'
        tags: '$(tag)'

    
    - task: replacetokens@3
      displayName: Write docker image tag to test sript
      inputs:
        rootDirectory: '$(test_script_path)'
        targetFiles: 'test_build.sh'
        encoding: 'auto'
        writeBOM: true
        actionOnMissing: 'warn'
        keepToken: false
        tokenPrefix: '!'
        tokenSuffix: '!'
        useLegacyPattern: false
        enableTransforms: false
        enableTelemetry: true
    
    - script: 'sh $(test_script_path)/$(test_script_name)'
      displayName: Test docker image

    - task: Docker@2
      displayName: Push docker image
      inputs:
        containerRegistry: 'dockerhub.com_karolplonka'
        repository: '$(image_repo)'
        command: 'buildAndPush'
        Dockerfile: '$(Build.SourcesDirectory)/Dockerfile'
        tags: '$(tag)'

    - task: PublishPipelineArtifact@1
      inputs:
        artifactName: 'manifests'
        path: 'manifests'    

- stage: Tests
  jobs:
  - job: Test
    displayName: Test the build
    pool:
      vmImage: ubuntu-latest
    steps:
    - script: echo Hello world!


        
- stage: Deploy
  displayName: Deploy to Dev
  dependsOn: Build
  variables:
    acrsecret: k8sexamplesacrauth
    insert_tag: '$(tag)'
  jobs:
  - deployment: Deploy
    displayName: Deploy to AKS
    environment: 'k8sdev.default'
    pool: 
      vmImage: ubuntu-latest
    strategy:
      runOnce:
        deploy:
          steps:
          - task: DownloadPipelineArtifact@2
            inputs:
              buildType: 'current'
              artifactName: 'manifests'
              targetPath: '$(System.ArtifactsDirectory)/manifests'
          

          - task: KubernetesManifest@0
            inputs:
              action: 'createSecret'
              namespace: 'default'
              secretType: 'dockerRegistry'
              secretName: '$(acrsecret)'
              dockerRegistryEndpoint: 'dockerhub.com_karolplonka'
          
          
          - task: replacetokens@3
            displayName: Replace Tokens
            inputs:
              rootDirectory: '$(System.ArtifactsDirectory)/manifests/'
              targetFiles: 'deployment.yml'
              encoding: 'auto'
              writeBOM: true
              actionOnMissing: 'warn'
              keepToken: false
              tokenPrefix: '!'
              tokenSuffix: '!'
              useLegacyPattern: false
              enableTransforms: false
              enableTelemetry: true

          - task: KubernetesManifest@0
            displayName: Deploy to Kubernetes cluster
            inputs:
              action: deploy
              namespace: 'default'
              manifests: |
                $(System.ArtifactsDirectory)/manifests/deployment.yml
                $(System.ArtifactsDirectory)/manifests/service.yml
              imagePullSecrets: |
                $(acrsecret)
              containers: |
                $(imageRepository):$(tag)

          #- task: Kubernetes@1 #half messure, restart pods to get new containter image form docker hub
          #  displayName: Restart pods
          #  inputs:
          #    connectionType: 'Kubernetes Service Connection'
          #    kubernetesServiceEndpoint: 'kubernetes_githubapi'
          #    command: 'delete'
          #    arguments: '--all pods'